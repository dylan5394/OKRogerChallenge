package app;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;

public class Counter {

	public void countWords(String filename) throws FileNotFoundException {
		
		ClassLoader classLoader = getClass().getClassLoader();
		File file = new File(classLoader.getResource("test.txt").getFile());
		
		
		Map <String, Integer> hm = new HashMap<String, Integer>();
		
		//File file = new File(filename);
		Scanner scan = new Scanner(file);
		
		while(scan.hasNext()) {
			
			String [] words = scan.nextLine().split(" ");
			for(String word : words) {
				
				String trimmed = word.trim();
				trimmed = trimmed.replaceFirst("^[^a-zA-Z]+", "");
				trimmed = trimmed.replaceAll("[^a-zA-Z]+$", "");
				
				String [] trimmedWords = trimmed.split("--");
				for(String trimmedWord : trimmedWords) {
					
					
				}
				
				if(trimmed.compareTo("") == 0) continue; //Don't store white space
				if(hm.containsKey(trimmed)) hm.put(trimmed, hm.get(trimmed) + 1);
				else hm.put(trimmed, 1);
			}
		}
		
		Map<String, Integer> sorted = sortMap(hm);
		
		try{
		    PrintWriter writer = new PrintWriter("output.txt", "UTF-8");
		    
		    Set<Entry<String, Integer>> set = sorted.entrySet();
		   
		    
		    for(Map.Entry<String, Integer> pair : set) {
		    	
		    	writer.println(pair.getKey() + ": " + pair.getValue());
		    }
		    
		    /*
		    for(String key : hm.keySet()) {
				
		    	writer.println(key + ": " + hm.get(key));
			}*/
		    
		    writer.close();
		} catch (IOException e) {
		   // do something
		}
	
		scan.close();
	}
	
	public HashMap<String, Integer> sortMap(Map<String, Integer> map) {
		
		List<Map.Entry<String, Integer>> list = new LinkedList<Map.Entry<String, Integer>>(map.entrySet());
	      
	       Collections.sort(list, new Comparator<Entry<String, Integer>>() {
	            public int compare(Entry<String, Integer> entry1, Entry<String, Integer> entry2) {
	               return ((Comparable<Integer>) entry1.getValue()).compareTo(entry2.getValue());
	            }
	       });

	      
	       HashMap<String, Integer> sortedHashMap = new LinkedHashMap<String, Integer>();
	       for (Iterator<Entry<String, Integer>> it = list.iterator(); it.hasNext();) {
	              Map.Entry<String, Integer> entry = (Map.Entry<String, Integer>) it.next();
	              sortedHashMap.put(entry.getKey(), entry.getValue());
	       } 
	       return sortedHashMap;
	}
	
}
